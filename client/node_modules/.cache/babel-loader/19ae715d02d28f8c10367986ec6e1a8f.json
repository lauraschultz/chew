{"ast":null,"code":"var _jsxFileName = \"/Users/lauraschultz/Documents/projects/yelp-restaurant-chooser/client/src/PlacesAutocomplete.tsx\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { googleCloudApiKey } from \"./config\";\nimport { useClickOutsideListenerRef } from \"./useClickOutsideListenerRef\";\nlet autoComplete;\n\nconst loadScript = (url, callback) => {\n  let script = document.createElement(\"script\");\n  script.type = \"text/javascript\";\n  script.onload = callback;\n  document.head.appendChild(script);\n  script.src = url;\n}; // function handleScriptLoad() {\n//   //   autoComplete = new (window as any).google.maps.places.Autocomplete(\n//   //     searchTerm,\n//   //     { types: [\"(regions)\"] }\n//   //   );\n//   //   autoComplete.setFields([\"address_components\", \"formatted_address\"]);\n//   //   autoComplete.addListener(\"place_changed\", () =>\n//   //     handlePlaceSelect(updateQuery)\n//   //   );\n// }\n\n\nconst PlacesAutocomplete = ({\n  searchTerm,\n  selectPlace\n}) => {\n  let currentSearchTerm = useRef(\"\");\n  let [currentSearchResults, setCurrentSearchResults] = useState([]);\n  let [hoveredIdx, setHoveredIdx] = useState(-1);\n  let scriptLoaded = useRef(false);\n  let selectedText = useRef();\n  const ref = useClickOutsideListenerRef(() => setCurrentSearchResults([]));\n\n  const handleScriptLoad = () => {\n    autoComplete = new window.google.maps.places.AutocompleteService();\n    scriptLoaded.current = true;\n  };\n\n  useEffect(() => {\n    loadScript(`https://maps.googleapis.com/maps/api/js?key=${googleCloudApiKey}&libraries=places`, () => handleScriptLoad());\n  }, []);\n\n  const keyPressEvent = e => {\n    switch (e.key) {\n      case \"ArrowDown\":\n        setHoveredIdx(val => (val + 1) % currentSearchResults.length);\n        break;\n\n      case \"ArrowUp\":\n        setHoveredIdx(val => ((val - 1) % currentSearchResults.length + currentSearchResults.length) % currentSearchResults.length);\n        break;\n\n      case \"Escape\":\n        setCurrentSearchResults([]);\n        setHoveredIdx(-1);\n        break;\n\n      case \"Enter\":\n        if (hoveredIdx > -1 && currentSearchResults.length > 0) {\n          e.preventDefault();\n          select(currentSearchResults[hoveredIdx].description);\n          setCurrentSearchResults([]);\n          setHoveredIdx(-1);\n        }\n\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", keyPressEvent);\n    return () => window.removeEventListener(\"keydown\", keyPressEvent);\n  }); // if(Math.abs(searchTerm.length - currentSearchTerm.length)<2){\n  //     setCurrentSearchTerm(searchTerm);\n  // }\n\n  if (scriptLoaded && searchTerm && Math.abs(searchTerm.length - currentSearchTerm.current.length) > 1) {\n    currentSearchTerm.current = searchTerm;\n    autoComplete.getPlacePredictions({\n      input: searchTerm,\n      types: [\"(regions)\"]\n    }, (result, status) => {\n      setCurrentSearchResults(result || []);\n    });\n  }\n\n  const select = selectedItem => {\n    selectedText.current = selectedItem;\n    selectPlace(selectedItem); // setCurrentSearchResults([])\n  };\n\n  if (selectedText.current === searchTerm) {\n    return /*#__PURE__*/React.createElement(\"ul\", {\n      ref: ref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 12\n      }\n    });\n  }\n\n  const poweredByGoogle = require(\"./assets/powered_by_google_on_white.png\");\n\n  return /*#__PURE__*/React.createElement(\"ul\", {\n    ref: ref,\n    className: \"absolute bg-white z-40 divide-y shadow text-sm rounded-b overflow:hidden\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 5\n    }\n  }, currentSearchResults.map((r, idx) => /*#__PURE__*/React.createElement(\"li\", {\n    key: r.id,\n    onMouseOver: e => setHoveredIdx(idx),\n    className: \"px-2 py-1 cursor-pointer \" + (hoveredIdx === idx ? \"bg-theme-blue-l-2 text-white\" : \"\"),\n    onClick: () => select(r.description),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  }, r.description)), currentSearchResults.length > 0 && /*#__PURE__*/React.createElement(\"img\", {\n    src: poweredByGoogle,\n    alt: \"powered by Google\",\n    className: \"float-right px-2 py-1 w-38\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }\n  }));\n};\n\nexport default PlacesAutocomplete;","map":{"version":3,"sources":["/Users/lauraschultz/Documents/projects/yelp-restaurant-chooser/client/src/PlacesAutocomplete.tsx"],"names":["React","useEffect","useRef","useState","googleCloudApiKey","useClickOutsideListenerRef","autoComplete","loadScript","url","callback","script","document","createElement","type","onload","head","appendChild","src","PlacesAutocomplete","searchTerm","selectPlace","currentSearchTerm","currentSearchResults","setCurrentSearchResults","hoveredIdx","setHoveredIdx","scriptLoaded","selectedText","ref","handleScriptLoad","window","google","maps","places","AutocompleteService","current","keyPressEvent","e","key","val","length","preventDefault","select","description","addEventListener","removeEventListener","Math","abs","getPlacePredictions","input","types","result","status","selectedItem","poweredByGoogle","require","map","r","idx","id"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport { googleCloudApiKey } from \"./config\";\nimport { useClickOutsideListenerRef } from \"./useClickOutsideListenerRef\";\n\nlet autoComplete: google.maps.places.AutocompleteService;\n\nconst loadScript = (\n  url: string,\n  callback: (this: GlobalEventHandlers, ev: Event) => any\n) => {\n  let script = document.createElement(\"script\");\n  script.type = \"text/javascript\";\n  script.onload = callback;\n  document.head.appendChild(script);\n  script.src = url;\n};\n\n// function handleScriptLoad() {\n//   //   autoComplete = new (window as any).google.maps.places.Autocomplete(\n//   //     searchTerm,\n//   //     { types: [\"(regions)\"] }\n//   //   );\n//   //   autoComplete.setFields([\"address_components\", \"formatted_address\"]);\n//   //   autoComplete.addListener(\"place_changed\", () =>\n//   //     handlePlaceSelect(updateQuery)\n//   //   );\n// }\n\nconst PlacesAutocomplete: React.FC<{\n  searchTerm: string;\n  selectPlace: (pl: string) => void;\n}> = ({ searchTerm, selectPlace }) => {\n  let currentSearchTerm = useRef(\"\");\n  let [currentSearchResults, setCurrentSearchResults] = useState<\n    google.maps.places.AutocompletePrediction[]\n  >([]);\n  let [hoveredIdx, setHoveredIdx] = useState(-1);\n  let scriptLoaded = useRef(false);\n  let selectedText = useRef<string>();\n  const ref = useClickOutsideListenerRef(() => setCurrentSearchResults([]));\n\n  const handleScriptLoad = () => {\n    autoComplete = new window.google.maps.places.AutocompleteService();\n    scriptLoaded.current = true;\n  };\n\n  useEffect(() => {\n    loadScript(\n      `https://maps.googleapis.com/maps/api/js?key=${googleCloudApiKey}&libraries=places`,\n      () => handleScriptLoad()\n    );\n  }, []);\n\n  const keyPressEvent = (e: KeyboardEvent) => {\n    switch (e.key) {\n      case \"ArrowDown\":\n        setHoveredIdx((val) => (val + 1) % currentSearchResults.length);\n        break;\n      case \"ArrowUp\":\n        setHoveredIdx(\n          (val) =>\n            (((val - 1) % currentSearchResults.length) +\n              currentSearchResults.length) %\n            currentSearchResults.length\n        );\n        break;\n      case \"Escape\":\n        setCurrentSearchResults([]);\n        setHoveredIdx(-1);\n        break;\n      case \"Enter\":\n        if (hoveredIdx > -1 && currentSearchResults.length > 0) {\n          e.preventDefault();\n          select(currentSearchResults[hoveredIdx].description);\n        setCurrentSearchResults([]);\n        setHoveredIdx(-1);\n        }\n        \n\n    }\n  };\n  useEffect(() => {\n    window.addEventListener(\"keydown\", keyPressEvent);\n\n    return () => window.removeEventListener(\"keydown\", keyPressEvent);\n  });\n\n  // if(Math.abs(searchTerm.length - currentSearchTerm.length)<2){\n  //     setCurrentSearchTerm(searchTerm);\n  // }\n\n  if (\n    scriptLoaded &&\n    searchTerm &&\n    Math.abs(searchTerm.length - currentSearchTerm.current.length) > 1\n  ) {\n    currentSearchTerm.current = searchTerm;\n    autoComplete.getPlacePredictions(\n      { input: searchTerm, types: [\"(regions)\"] },\n      (result, status) => {\n        setCurrentSearchResults(result || []);\n      }\n    );\n  }\n\n  const select = (selectedItem: string) => {\n    selectedText.current = selectedItem;\n    selectPlace(selectedItem);\n    // setCurrentSearchResults([])\n  };\n\n  if (selectedText.current === searchTerm) {\n    return <ul ref={ref} />;\n  }\n\n  const poweredByGoogle = require(\"./assets/powered_by_google_on_white.png\");\n  return (\n    <ul\n      ref={ref}\n      className=\"absolute bg-white z-40 divide-y shadow text-sm rounded-b overflow:hidden\"\n    >\n      {currentSearchResults.map((r, idx) => (\n        <li\n          key={r.id}\n          onMouseOver={(e) => setHoveredIdx(idx)}\n          className={\n            \"px-2 py-1 cursor-pointer \" +\n            (hoveredIdx === idx ? \"bg-theme-blue-l-2 text-white\" : \"\")\n          }\n          onClick={() => select(r.description)}\n        >\n          {r.description}\n        </li>\n      ))}\n      {currentSearchResults.length > 0 && (\n        <img src={poweredByGoogle} alt=\"powered by Google\" className=\"float-right px-2 py-1 w-38\" />\n      )}\n    </ul>\n  );\n};\n\nexport default PlacesAutocomplete;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import{useCallback,useEffect,useRef}from'react';export var useClickOutsideListenerRef=function useClickOutsideListenerRef(onClose){var ref=useRef(null);var escapeListener=useCallback(function(e){if(e.key==='Escape'){onClose();}},[onClose]);var clickListener=useCallback(function(e){if(!ref.current.contains(e.target)){onClose===null||onClose===void 0?void 0:onClose();}},[onClose]);useEffect(function(){document.addEventListener('click',clickListener);document.addEventListener('keyup',escapeListener);return function(){document.removeEventListener('click',clickListener);document.removeEventListener('keyup',escapeListener);};},[clickListener,escapeListener]);return ref;};","map":{"version":3,"sources":["/Users/lauraschultz/Documents/projects/yelp-restaurant-chooser/client/src/useClickOutsideListenerRef.tsx"],"names":["useCallback","useEffect","useRef","useClickOutsideListenerRef","onClose","ref","escapeListener","e","key","clickListener","current","contains","target","document","addEventListener","removeEventListener"],"mappings":"AAAA,OAASA,WAAT,CAAsBC,SAAtB,CAAiCC,MAAjC,KAA+C,OAA/C,CAEA,MAAO,IAAMC,CAAAA,0BAA0B,CAAG,QAA7BA,CAAAA,0BAA6B,CAACC,OAAD,CAAyB,CACjE,GAAMC,CAAAA,GAAG,CAAGH,MAAM,CAAC,IAAD,CAAlB,CACA,GAAMI,CAAAA,cAAc,CAAGN,WAAW,CAAC,SAACO,CAAD,CAAsB,CACvD,GAAIA,CAAC,CAACC,GAAF,GAAU,QAAd,CAAwB,CACtBJ,OAAO,GACR,CACF,CAJiC,CAI/B,CAACA,OAAD,CAJ+B,CAAlC,CAKA,GAAMK,CAAAA,aAAa,CAAGT,WAAW,CAC/B,SAACO,CAAD,CAAmB,CACjB,GAAI,CAAEF,GAAG,CAACK,OAAL,CAAsBC,QAAtB,CAA+BJ,CAAC,CAACK,MAAjC,CAAL,CAA+C,CAC7CR,OAAO,OAAP,EAAAA,OAAO,SAAP,QAAAA,OAAO,GACR,CACF,CAL8B,CAM/B,CAACA,OAAD,CAN+B,CAAjC,CAQAH,SAAS,CAAC,UAAM,CACdY,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,CAAmCL,aAAnC,EACAI,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,CAAmCR,cAAnC,EACA,MAAO,WAAM,CACXO,QAAQ,CAACE,mBAAT,CAA6B,OAA7B,CAAsCN,aAAtC,EACAI,QAAQ,CAACE,mBAAT,CAA6B,OAA7B,CAAsCT,cAAtC,EACD,CAHD,CAID,CAPQ,CAON,CAACG,aAAD,CAAgBH,cAAhB,CAPM,CAAT,CAQA,MAAOD,CAAAA,GAAP,CACD,CAxBM","sourcesContent":["import { useCallback, useEffect, useRef } from 'react'\n\nexport const useClickOutsideListenerRef = (onClose: () => void) => {\n  const ref = useRef(null)\n  const escapeListener = useCallback((e: KeyboardEvent) => {\n    if (e.key === 'Escape') {\n      onClose()\n    }\n  }, [onClose])\n  const clickListener = useCallback(\n    (e: MouseEvent) => {\n      if (!(ref.current! as any).contains(e.target)) {\n        onClose?.()\n      }\n    },\n    [onClose],\n  )\n  useEffect(() => {\n    document.addEventListener('click', clickListener)\n    document.addEventListener('keyup', escapeListener)\n    return () => {\n      document.removeEventListener('click', clickListener)\n      document.removeEventListener('keyup', escapeListener)\n    }\n  }, [clickListener, escapeListener])\n  return ref\n}"]},"metadata":{},"sourceType":"module"}